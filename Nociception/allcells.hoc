ncell = 10

objref cells, nil, nc
cells = new List()

objref pc
pc = new ParallelContext()

{load_file("linetemp.hoc")}

objref r
objref cells, nil, nc, ncs
cells = new List()
ncs = new List()


r = new Random(startsw())

objref times
times = new Vector()

r.uniform(0, 200)

for i=0, 9{
    tt = r.repick() + i*1000
    times.append(tt)
    print(times.get[i])
}

//for (i = pc.id; ncell-1; i+=pc.nhost) {
for i=0, ncell-1{
    r.uniform(0, 0.5)
    n = 1
    //int(r.repick())
    print(n)
	d=0.25
    print(d)
    if (i > 3){
        r.uniform(0.5, 2)
        d = r.repick()
    }
    if (i > 6){
        r.uniform(3, 5)
        d = r.repick()
    }
        r.uniform(3, 100)
        n = r.repick()
        r.uniform(150, 300)
        len = r.repick()
        r.uniform(250, 800)
        z = r.repick()
        cells.append(new oneCell(z, d, n, times, len))
        pc.set_gid2node(i, pc.id)
        nc = cells.object(cells.count()-1).connect2target(nil)
        pc.cell(i, nc)
        ncs.append(nc)
    
    //pc.set_gid2node(i, pc.id)
    //nc = cells.object(cells.count()-1).connect2target(nil) 
    //pc.cell(i, nc) 
}
//pc.barrier() 
{load_file("./session/cells.ses")}

//pc.runworker()
//pc.done()

//forall psection()

objref exsynrec[ncell]
for i=0, ncell-1{
    exsynrec[i]= new Vector()
    ncs.object(i).record(exsynrec[i])//.record(&oneCell[i].soma.vext[0](0.5)) 
}

tstop = 10000
v_init = -55
{load_file("balance.hoc")}

proc rrun() {
    finitialize(v_init)
    balance()
    if (cvode.active()) {
        cvode.re_init()
    } else {
        fcurrent()
    }
    frecord_init()
}

rrun()

objref fok
fok=new File()

run()

for i=0, ncell-1{
    strdef basename0, basename1, extension, filename0, filename1
    basename0 = "./res/extra"
    extension = "txt"

    sprint(filename0, "%sn%d.%s", basename0, i, extension)
    fok.wopen(filename0)
    exsynrec[i].printf(fok)
    fok.close()
}