create  treeA[1] //soma,

tstop = 400 
v_init = -55


//access soma
objectvar f

begintemplate Sin
objref list, diff1[1],p2x30[1] 
public diff1,p2x30
public list

proc init(){
  nsyn =$1
  objectvar diff1[nsyn],p2x30[nsyn]
  list= new List()
  for i=0, nsyn-1 {
  diff1[i]=new AtP_4(0.5)
  p2x30[i] = new p2x3(0.5)
  diff1[i].c0cleft = 10
  diff1[i].Deff = 0.8
  p2x30[i].Ev = 5
  p2x30[i].gmax = 6
  setpointer p2x30[i].patp, diff1[i].atp
}
  //diff1[0].k = 0
  //diff1[1].k = 0
  diff1[0].h = $2
  diff1[1].h = $3
 // diff1[0].k =10
 // diff1[1].k =10
 /* diff1[2].h =$2
  diff1[3].h =$3
  diff1[4].h =$2
  diff1[5].h =$3
  diff1[6].h =$2*/
  //diff1[0].k = 0
  //diff1[1].k = 0
  diff1[0].tx1 = $4 //+ ($2/1250)*1000
  diff1[1].tx1 = $5 //+ ($3/1250)*1000
 /* diff1[2].tx1 =$6
  diff1[3].tx1 =$7
  diff1[4].tx1 = $8
  diff1[5].tx1 = $9
  diff1[6].tx1 = $10*/
for i=0, nsyn-1 {
 list.append(diff1[i])
}
}
endtemplate Sin

n=2
/*soma {
    nseg = 1
    diam = 18.8
    L = 18.8
    Ra = 123.0
    insert hh
    gnabar_hh=0.25
    gl_hh = .0002
    el_hh = -60.0
    gkbar_hh = 0.36
}
*/
f = new File()

f.ropen("./topologies/modeline.dat")
ndendA = f.scanvar() 
create treeA[ndendA]
objref GrCell[ndendA]


for i = 0,ndendA-1 {
      
  me = f.scanvar() - 1 // sets the current branch/section 
  child1 = f.scanvar() - 1 

  treeA[me]{ 
    nseg = 1
    diam1 = f.scanvar()
    diam = 0.25
    L = f.scanvar()
    Ra = 35

    pt3dclear()

    pt3dadd(f.scanvar(),f.scanvar(),f.scanvar(),diam)

    x = f.scanvar()
    y = f.scanvar()
    z = f.scanvar()

    pt3dadd(x, y, z,diam)

   if(me > 10){
        h1 = sqrt((15000-x)*(15000-x) + (0-y)*(0-y) + (0.00001-z)*(0.00001-z))
        h2 = sqrt((22200-x)*(22200-x) + (15-y)*(15-y) + (1-z)*(1-z))
        h3 = sqrt((10300-x)*(10300-x) + (10-y)*(10-y) + (1-z)*(1-z))
        h4 = sqrt((10450-x)*(10450-x) + (80-y)*(80-y) + (1-z)*(1-z))

        GrCell[me] = new Sin(n, h1, h1, 20, 20) //, 180, 260, 345, 430, 515)
        //, h3, h4, 50, 65)
    }
//
    insert navv1p8
    gbar_navv1p8 = 0.24271
    //slow_inact_nav18=1
    insert na17a
    gbar_na17a=0//.106
    insert extracellular
    xg = 1000
    xc = 300
    //xraxial = 100
    insert nap
    gbar_nap = 0.0//002
    insert nafast
    gbar_nafast=0.0//2
    insert naslow
    gbar_naslow=0.0//1

    insert nav1p9
    gbar_nav1p9 = 0//9.4779e-5

    insert kdr
    gbar_kdr = 0.//01

    insert kna
    gbar_kna = 0//.00042

    insert kad 
    gbar_kad = 0.05
    insert kap   
    gbar_kap = 0.05
    
    insert nakpump
    smalla_nakpump = -0.0047891
    insert naoi
    theta_naoi = 0.029
    insert koi
    theta_koi = 0.029
    
    insert leak
    insert extrapump 

    insert Nav1_3 
    gbar_Nav1_3 = 0.2

    insert nattxs
    gbar_nattxs = 0.1

    celsiusT_nakpump = 37
    celsiusT_navv1p8 = 37
    celsiusT_kdr = 37
    //celsius_na13a = 37
    celsius_na17a = 37  
    celsiusT_nattxs = 37  
    celsius_kad = 37
    celsius_kap = 37
   // insert bk
   // gbar_bk = 0.01

    //insert cal
    //gbar_cal = 0.001

   // insert sk
   // gkbar_sk = 0.01
     
  //  insert cat
  //  eca = 126.1
  //  gmax_cat=0.0008

    if (child1 >= 0) {
      connect treeA[child1](0), 1
    }

  }
}

f.close() //closes the file data holder called f


// Connect things together 
//connect treeA[0](0), soma(1) 
//print soma.v
objref datas, data10, data40, data75, data115, data90, wg, gg

wg= new Vector()
wg.record(&treeA[59].v( 0.5 ))
gg= new Vector()
gg.record(&treeA[59].hTau_Nav1_3( 0.5 ))

data10= new Vector()
data10.record(&v( 0.5 ))
data40= new Vector()
data40.record(&treeA[58].v( 0.5 ))
data75= new Vector()
data75.record(&treeA[57].v( 0.5 ))
datas= new Vector()
datas.record(&GrCell[59].p2x30[0].i)


/*data115= new Vector()
data115.record(&treeA[115].v(0.5))
data90= new Vector()
data90.record(&treeA[90].v(0.5))
datas= new Vector()*/

objref fok
// Start run
v_init = -55
tstop = 50

{load_file("balance.hoc")}

proc init() {
    finitialize(v_init)
    balance()
    if (cvode.active()) {
      cvode.re_init()
    } else {
      fcurrent()
    }
    frecord_init()
}

{load_file("./session/11.ses")}

init()

objref fok
// Start run
run()


objref datafile
strdef basename, extension, filename00, filename01, filename75, filename10, filename40, filenames
extension = "txt"
basename = "./res/what"

sprint(filenames, "%s%d.%s", basename, 6, extension)

sprint(filename00, "%s%d.%s", basename, 1, extension)
sprint(filename01, "%s%d.%s", basename, 2, extension)


sprint(filename10, "%s%d.%s", basename, 3, extension)
sprint(filename40, "%s%d.%s", basename, 4, extension)
sprint(filename75, "%s%d.%s", basename, 5, extension)
/*
sprint(filename115, "%s%d.%s", basename, 115, extension)
sprint(filename90, "%s%d.%s", basename, 90, extension)
sprint(filenames, "%s%d.%s", basename, 0, extension)
*/

fok=new File()


fok.wopen(filename00)
wg.printf(fok)
fok.close()
fok.wopen(filename01)
gg.printf(fok)
fok.close()

fok.wopen(filename75)
data75.printf(fok)
fok.close()
fok.wopen(filename10)
data10.printf(fok)
fok.close()
fok.wopen(filename40)
data40.printf(fok)
fok.close()
fok.wopen(filenames)
datas.printf(fok)
fok.close()
//{load_file("recording.hoc")}


{load_file("./session/11.ses")}

forall psection()


