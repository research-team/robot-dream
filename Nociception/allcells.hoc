ncell = 10

objref cells, nil, nc
cells = new List()

objref pc
pc = new ParallelContext()

{load_file("linetemp.hoc")}
{load_file("treetemp.hoc")}


objref r
r = new Random()
objref cells, nil, nc, ncs
cells = new List()
ncs = new List()


objref pc, r
pc = new ParallelContext()
r = new Random(startsw())

//for (i = pc.id; ncell-1; i+=pc.nhost) {
for i=0, ncell-1{
    r.uniform(0, 2)
    n = 1
    //int(r.repick())
    print(n)
	d=r.repick()
    if (i > 3){
        r.uniform(3, 6)
        d = r.repick()
    }
    if (i > 6){
        r.uniform(8, 10)
        d = r.repick()
    }
    if (i%2 == 0){
        r.uniform(0, 1500)
        cells.append(new oneCell((i+1)*2, d, n, r.repick()))
        pc.set_gid2node(i, pc.id)
        nc = cells.object(cells.count()-1).connect2target(nil)
        pc.cell(i, nc)
        ncs.append(nc)
    }else{
        r.uniform(0, 1500)
        cells.append(new treeCell((i+1)*2, d, n, r.repick()))
        pc.set_gid2node(i, pc.id)
        nc = cells.object(cells.count()-1).connect2target(nil)
        pc.cell(i, nc)
        ncs.append(nc)
    }
    if (i > 3){
    	cells.object(cells.count()-1).GrCell.p2x30[0].gmax = 35+i*10
    	cells.object(cells.count()-1).GrCell.p2x30[1].gmax = 35+i*10
    }
    //pc.set_gid2node(i, pc.id)
    //nc = cells.object(cells.count()-1).connect2target(nil) 
    //pc.cell(i, nc) 
}
//pc.barrier() 
{load_file("./session/cells.ses")}

//pc.runworker()
//pc.done()

forall psection()

objref exsynrec[ncell]
for i=0, ncell-1{
    exsynrec[i]= new Vector()
    ncs.object(i).record(exsynrec[i])//.record(&oneCell[i].soma.vext[0](0.5)) 
}

tstop = 6000
v_init = -72
run()

objref fok
fok=new File()


for i=0, ncell-1{
    strdef basename0, basename1, extension, filename0, filename1
    basename0 = "./res/extra"
    extension = "txt"

    sprint(filename0, "%sn%d.%s", basename0, i, extension)
    fok.wopen(filename0)
    exsynrec[i].printf(fok)
    fok.close()
}