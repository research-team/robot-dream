create soma, treeA[1]


tstop = 400 
v_init = -72

access soma
objectvar f

begintemplate Sin
objref list, diff1[1],p2x30[1] 
public diff1,p2x30
public list

proc init(){
nsyn =$1
objectvar diff1[nsyn],p2x30[nsyn]
list= new List()
for i=0, nsyn-1 {
diff1[i]=new AtP_4(0.5)
p2x30[i] = new p2x3(0.5)
diff1[i].c0cleft = 3
diff1[i].Deff = 0.4
p2x30[i].Ev = -40
//p2x30[i].gmax = 32
//diff1[i].tx1 = 6 + i*60
//diff1[i].h =$2 
setpointer p2x30[i].patp, diff1[i].atp
}
  //diff1[0].k = 0
  //diff1[1].k = 0
  diff1[0].h =$2
  diff1[1].h =$3
diff1[2].h =$2
  diff1[3].h =$3
  diff1[4].h =$2
  diff1[5].h =$3
  diff1[6].h =$2
  //diff1[0].k = 0
  //diff1[1].k = 0
  diff1[0].tx1 = $4
  diff1[1].tx1 = $5
  diff1[2].tx1 =$6
  diff1[3].tx1 =$7
  diff1[4].tx1 = $8
  diff1[5].tx1 = $9
  diff1[6].tx1 = $10
for i=0, nsyn-1 {
 list.append(diff1[i])
}
}
endtemplate Sin

n=7
soma {
    nseg = 1
    diam = 18.8
    L = 18.8
    Ra = 123.0
    insert hh
    gnabar_hh=0.25
    gl_hh = .0002
    el_hh = -60.0
    gkbar_hh = 0.36
}

f = new File()

f.ropen("modeltree2.dat")
ndendA = f.scanvar() 
create treeA[ndendA]
objref GrCell[ndendA]


for i = 0,ndendA-1 {
      
  me = f.scanvar() - 1 // sets the current branch/section 
  child1 = f.scanvar() - 1 
  child2 = f.scanvar() - 1 
  child3 = f.scanvar() - 1 

  treeA[me]{ 
    nseg = 1
    diam = f.scanvar()
    L = f.scanvar()
    Ra = 123

    pt3dclear()

    pt3dadd(f.scanvar(),f.scanvar(),f.scanvar(),diam)

    x = f.scanvar()
    y = f.scanvar()
    z = f.scanvar()

    pt3dadd(x, y, z,diam)

    if(me > 1){
        h1 = (0.00001)*((6000-x)*(6000-x) + (1-y)*(1-y) + (1-z)*(1-z))
        h2 = (0.00001)*((16000-x)*(16000-x) + (-600-y)*(-600-y) + (1-z)*(1-z))
        h3 = (0.00001)*((25000-x)*(25000-x) + (-400-y)*(-400-y) + (1-z)*(1-z))
        h4 = (0.00001)*((15000-x)*(15000-x) + (10-y)*(10-y) + (1-z)*(1-z))

        GrCell[me] = new Sin(n, h3, h4, 20, 70, 120, 170, 220, 270, 320)
    }
//
    insert nav18
    gbar_nav18 = 0.002
    slow_inact_nav18=1
    insert na_ion
    ena = 50
    insert na17a
    gbar_na17a=25.2
    insert extracellular
    xg = 1000
    xc = 300
    //xraxial = 100

    insert nap
    gbar_nap = 0.0001
    insert nafast
    gbar_nafast=0.05
    insert naslow
    gbar_naslow=0.02

    insert kv       
    gbar_kv = 60
    ek = -77
    insert kdr0
    gbar_kdr0 = 0.1
      
    insert kad 
    gbar_kad = 0.3
    insert kap   
    gbar_kap = 0.3

    insert bk
    gbar_bk = 0.01

    //insert cal
    //gbar_cal = 0.001

    insert sk
    gkbar_sk = 0.01
     
  //  insert cat
  //  eca = 126.1
  //  gmax_cat=0.0008


    if (child1 >= 0) {
      connect treeA[child1](0), 1
    }

    if (child2 >= 0) {
      connect treeA[child2](0), 1
    }

    if (child3 >= 0) {
      connect treeA[child3](0), 1
    }

  }
}

f.close() //closes the file data holder called f
connect treeA[0](0), soma(1) 

print soma.v
/*
objref datas, data10, data40, data75, data115, data90


data10= new Vector()
data10.record(&treeA[10].v(0.5))
data40= new Vector()
data40.record(&treeA[40].v(0.5))
data75= new Vector()
data75.record(&treeA[75].v(0.5))
data115= new Vector()
data115.record(&treeA[200].v(0.5))
data90= new Vector()
data90.record(&treeA[140].v(0.5))
datas= new Vector()
datas.record(&soma.v(0.5))

objref fok
// Start run
run()

objref datafile
strdef basename, extension, filename10, filename40, filename75, filename90, filename115, filenames
extension = "txt"
basename = "what"

sprint(filename10, "%s%d.%s", basename, 10, extension)
sprint(filename40, "%s%d.%s", basename, 40, extension)
sprint(filename75, "%s%d.%s", basename, 75, extension)
sprint(filename115, "%s%d.%s", basename, 115, extension)
sprint(filename90, "%s%d.%s", basename, 90, extension)
sprint(filenames, "%s%d.%s", basename, 0, extension)


fok=new File()


fok.wopen(filename10)
data10.printf(fok)
fok.close()
fok.wopen(filename40)
data40.printf(fok)
fok.close()
fok.wopen(filename75)
data75.printf(fok)
fok.close()
fok.wopen(filename115)
data115.printf(fok)
fok.close()
fok.wopen(filename90)
data90.printf(fok)
fok.close()
fok.wopen(filenames)
datas.printf(fok)
fok.close()*/

// Connect things together 

forall psection()


